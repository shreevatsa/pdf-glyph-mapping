<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="90"><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="645" width="1.1111%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::repeat::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="629" width="1.1111%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="613" width="1.1111%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::map::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="597" width="1.1111%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="581" width="1.1111%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Sub&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::sub::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="565" width="1.1111%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="549" width="1.1111%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Add&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::add::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="533" width="1.1111%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="517" width="1.1111%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::repeat::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="501" width="1.1111%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="485" width="1.1111%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Sub&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::sub::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="469" width="1.1111%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="453" width="1.1111%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::bit::BitOr&gt;::bitor::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="437" width="1.1111%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="421" width="1.1111%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::bit::BitOr&gt;::bitor::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="405" width="1.1111%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="389" width="1.1111%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::bit::BitOr&gt;::bitor::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="373" width="1.1111%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="357" width="1.1111%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::map::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="341" width="1.1111%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="325" width="1.1111%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Sub&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::sub::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="309" width="1.1111%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="293" width="1.1111%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Mul&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::mul::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="277" width="1.1111%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="0.0000%" y="261" width="1.1111%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>pom::parser::sym::{{closure}} (1 samples, 1.11%)</title><rect x="0.0000%" y="245" width="1.1111%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>alloc::fmt::format (1 samples, 1.11%)</title><rect x="0.0000%" y="229" width="1.1111%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 1.11%)</title><rect x="0.0000%" y="213" width="1.1111%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 1.11%)</title><rect x="0.0000%" y="197" width="1.1111%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 1.11%)</title><rect x="0.0000%" y="181" width="1.1111%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="0.0000%" y="165" width="1.1111%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="0.0000%" y="149" width="1.1111%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Mul&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::mul::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="645" width="1.1111%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="1.3611%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 1.11%)</title><rect x="1.1111%" y="629" width="1.1111%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="1.3611%" y="639.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Mul&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::mul::{{closure}}::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="613" width="1.1111%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="1.3611%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="597" width="1.1111%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="1.3611%" y="607.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::map::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="581" width="1.1111%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="1"/><text x="1.3611%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="565" width="1.1111%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1"/><text x="1.3611%" y="575.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::repeat::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="549" width="1.1111%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="1"/><text x="1.3611%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="533" width="1.1111%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="1"/><text x="1.3611%" y="543.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::map::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="517" width="1.1111%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="1"/><text x="1.3611%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="501" width="1.1111%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="1"/><text x="1.3611%" y="511.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Sub&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::sub::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="485" width="1.1111%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="1"/><text x="1.3611%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="469" width="1.1111%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="1"/><text x="1.3611%" y="479.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Add&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::add::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="453" width="1.1111%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="1"/><text x="1.3611%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 1.11%)</title><rect x="1.1111%" y="437" width="1.1111%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="1"/><text x="1.3611%" y="447.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::arith::Add&lt;pom::parser::Parser&lt;I,U&gt;&gt;&gt;::add::{{closure}}::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="421" width="1.1111%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="1"/><text x="1.3611%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="405" width="1.1111%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="1"/><text x="1.3611%" y="415.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::convert::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="389" width="1.1111%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="1"/><text x="1.3611%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="373" width="1.1111%" height="15" fill="rgb(206,27,48)" fg:x="1" fg:w="1"/><text x="1.3611%" y="383.50"></text></g><g><title>pom::parser::Parser&lt;I,O&gt;::repeat::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="357" width="1.1111%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="1"/><text x="1.3611%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="341" width="1.1111%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="1"/><text x="1.3611%" y="351.50"></text></g><g><title>&lt;pom::parser::Parser&lt;I,O&gt; as core::ops::bit::BitOr&gt;::bitor::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="325" width="1.1111%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="1"/><text x="1.3611%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 1.11%)</title><rect x="1.1111%" y="309" width="1.1111%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="1"/><text x="1.3611%" y="319.50"></text></g><g><title>pom::parser::is_a::{{closure}} (1 samples, 1.11%)</title><rect x="1.1111%" y="293" width="1.1111%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="1"/><text x="1.3611%" y="303.50"></text></g><g><title>alloc::fmt::format (1 samples, 1.11%)</title><rect x="1.1111%" y="277" width="1.1111%" height="15" fill="rgb(251,118,11)" fg:x="1" fg:w="1"/><text x="1.3611%" y="287.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 1.11%)</title><rect x="1.1111%" y="261" width="1.1111%" height="15" fill="rgb(217,147,25)" fg:x="1" fg:w="1"/><text x="1.3611%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 1.11%)</title><rect x="1.1111%" y="245" width="1.1111%" height="15" fill="rgb(247,81,37)" fg:x="1" fg:w="1"/><text x="1.3611%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 1.11%)</title><rect x="1.1111%" y="229" width="1.1111%" height="15" fill="rgb(209,12,38)" fg:x="1" fg:w="1"/><text x="1.3611%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 1.11%)</title><rect x="1.1111%" y="213" width="1.1111%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="1"/><text x="1.3611%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 1.11%)</title><rect x="1.1111%" y="197" width="1.1111%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="1"/><text x="1.3611%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.11%)</title><rect x="1.1111%" y="181" width="1.1111%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="1"/><text x="1.3611%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.11%)</title><rect x="1.1111%" y="165" width="1.1111%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="1"/><text x="1.3611%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.11%)</title><rect x="1.1111%" y="149" width="1.1111%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="1"/><text x="1.3611%" y="159.50"></text></g><g><title>_malloc (1 samples, 1.11%)</title><rect x="1.1111%" y="133" width="1.1111%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="1"/><text x="1.3611%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 1.11%)</title><rect x="1.1111%" y="117" width="1.1111%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="1"/><text x="1.3611%" y="127.50"></text></g><g><title>_szone_malloc_should_clear (1 samples, 1.11%)</title><rect x="1.1111%" y="101" width="1.1111%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="1"/><text x="1.3611%" y="111.50"></text></g><g><title>_tiny_malloc_should_clear (1 samples, 1.11%)</title><rect x="1.1111%" y="85" width="1.1111%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="1"/><text x="1.3611%" y="95.50"></text></g><g><title>_tiny_free_list_add_ptr (1 samples, 1.11%)</title><rect x="1.1111%" y="69" width="1.1111%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="1"/><text x="1.3611%" y="79.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="1.1111%" y="53" width="1.1111%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="1"/><text x="1.3611%" y="63.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="1.1111%" y="37" width="1.1111%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="1"/><text x="1.3611%" y="47.50"></text></g><g><title>toml::de::Deserializer::key_value (1 samples, 1.11%)</title><rect x="2.2222%" y="261" width="1.1111%" height="15" fill="rgb(244,35,45)" fg:x="2" fg:w="1"/><text x="2.4722%" y="271.50"></text></g><g><title>toml::de::Deserializer::value (1 samples, 1.11%)</title><rect x="2.2222%" y="245" width="1.1111%" height="15" fill="rgb(251,115,12)" fg:x="2" fg:w="1"/><text x="2.4722%" y="255.50"></text></g><g><title>toml::de::Deserializer::array (1 samples, 1.11%)</title><rect x="2.2222%" y="229" width="1.1111%" height="15" fill="rgb(240,54,50)" fg:x="2" fg:w="1"/><text x="2.4722%" y="239.50"></text></g><g><title>toml::de::Deserializer::value (1 samples, 1.11%)</title><rect x="2.2222%" y="213" width="1.1111%" height="15" fill="rgb(233,84,52)" fg:x="2" fg:w="1"/><text x="2.4722%" y="223.50"></text></g><g><title>toml::de::Deserializer::next (1 samples, 1.11%)</title><rect x="2.2222%" y="197" width="1.1111%" height="15" fill="rgb(207,117,47)" fg:x="2" fg:w="1"/><text x="2.4722%" y="207.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 1.11%)</title><rect x="2.2222%" y="181" width="1.1111%" height="15" fill="rgb(249,43,39)" fg:x="2" fg:w="1"/><text x="2.4722%" y="191.50"></text></g><g><title>toml::tokens::Tokenizer::keylike (1 samples, 1.11%)</title><rect x="2.2222%" y="165" width="1.1111%" height="15" fill="rgb(209,38,44)" fg:x="2" fg:w="1"/><text x="2.4722%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="2.2222%" y="149" width="1.1111%" height="15" fill="rgb(236,212,23)" fg:x="2" fg:w="1"/><text x="2.4722%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="2.2222%" y="133" width="1.1111%" height="15" fill="rgb(242,79,21)" fg:x="2" fg:w="1"/><text x="2.4722%" y="143.50"></text></g><g><title>toml::de::Deserializer::tables (2 samples, 2.22%)</title><rect x="2.2222%" y="293" width="2.2222%" height="15" fill="rgb(211,96,35)" fg:x="2" fg:w="2"/><text x="2.4722%" y="303.50">t..</text></g><g><title>toml::de::Deserializer::line (2 samples, 2.22%)</title><rect x="2.2222%" y="277" width="2.2222%" height="15" fill="rgb(253,215,40)" fg:x="2" fg:w="2"/><text x="2.4722%" y="287.50">t..</text></g><g><title>toml::de::Deserializer::peek (1 samples, 1.11%)</title><rect x="3.3333%" y="261" width="1.1111%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="1"/><text x="3.5833%" y="271.50"></text></g><g><title>toml::tokens::Tokenizer::peek (1 samples, 1.11%)</title><rect x="3.3333%" y="245" width="1.1111%" height="15" fill="rgb(208,190,38)" fg:x="3" fg:w="1"/><text x="3.5833%" y="255.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 1.11%)</title><rect x="3.3333%" y="229" width="1.1111%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="1"/><text x="3.5833%" y="239.50"></text></g><g><title>toml::tokens::Tokenizer::keylike (1 samples, 1.11%)</title><rect x="3.3333%" y="213" width="1.1111%" height="15" fill="rgb(237,122,38)" fg:x="3" fg:w="1"/><text x="3.5833%" y="223.50"></text></g><g><title>toml::tokens::Tokenizer::one (1 samples, 1.11%)</title><rect x="3.3333%" y="197" width="1.1111%" height="15" fill="rgb(244,218,35)" fg:x="3" fg:w="1"/><text x="3.5833%" y="207.50"></text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.11%)</title><rect x="3.3333%" y="181" width="1.1111%" height="15" fill="rgb(240,68,47)" fg:x="3" fg:w="1"/><text x="3.5833%" y="191.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.11%)</title><rect x="3.3333%" y="165" width="1.1111%" height="15" fill="rgb(210,16,53)" fg:x="3" fg:w="1"/><text x="3.5833%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="3.3333%" y="149" width="1.1111%" height="15" fill="rgb(235,124,12)" fg:x="3" fg:w="1"/><text x="3.5833%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="3.3333%" y="133" width="1.1111%" height="15" fill="rgb(224,169,11)" fg:x="3" fg:w="1"/><text x="3.5833%" y="143.50"></text></g><g><title>dump_tjs::wrap_text_operation::actual_text_for::get_font_mapping (3 samples, 3.33%)</title><rect x="2.2222%" y="389" width="3.3333%" height="15" fill="rgb(250,166,2)" fg:x="2" fg:w="3"/><text x="2.4722%" y="399.50">dum..</text></g><g><title>toml::de::from_slice (3 samples, 3.33%)</title><rect x="2.2222%" y="373" width="3.3333%" height="15" fill="rgb(242,216,29)" fg:x="2" fg:w="3"/><text x="2.4722%" y="383.50">tom..</text></g><g><title>toml::de::from_str (3 samples, 3.33%)</title><rect x="2.2222%" y="357" width="3.3333%" height="15" fill="rgb(230,116,27)" fg:x="2" fg:w="3"/><text x="2.4722%" y="367.50">tom..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 3.33%)</title><rect x="2.2222%" y="341" width="3.3333%" height="15" fill="rgb(228,99,48)" fg:x="2" fg:w="3"/><text x="2.4722%" y="351.50">ser..</text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_map (3 samples, 3.33%)</title><rect x="2.2222%" y="325" width="3.3333%" height="15" fill="rgb(253,11,6)" fg:x="2" fg:w="3"/><text x="2.4722%" y="335.50">&lt;&amp;m..</text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (3 samples, 3.33%)</title><rect x="2.2222%" y="309" width="3.3333%" height="15" fill="rgb(247,143,39)" fg:x="2" fg:w="3"/><text x="2.4722%" y="319.50">&lt;&amp;m..</text></g><g><title>toml::de::build_table_pindices (1 samples, 1.11%)</title><rect x="4.4444%" y="293" width="1.1111%" height="15" fill="rgb(236,97,10)" fg:x="4" fg:w="1"/><text x="4.6944%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.11%)</title><rect x="4.4444%" y="277" width="1.1111%" height="15" fill="rgb(233,208,19)" fg:x="4" fg:w="1"/><text x="4.6944%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 1.11%)</title><rect x="4.4444%" y="261" width="1.1111%" height="15" fill="rgb(216,164,2)" fg:x="4" fg:w="1"/><text x="4.6944%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="4.4444%" y="245" width="1.1111%" height="15" fill="rgb(220,129,5)" fg:x="4" fg:w="1"/><text x="4.6944%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="4.4444%" y="229" width="1.1111%" height="15" fill="rgb(242,17,10)" fg:x="4" fg:w="1"/><text x="4.6944%" y="239.50"></text></g><g><title>dump_tjs::wrap_text_operation (4 samples, 4.44%)</title><rect x="2.2222%" y="421" width="4.4444%" height="15" fill="rgb(242,107,0)" fg:x="2" fg:w="4"/><text x="2.4722%" y="431.50">dump_..</text></g><g><title>dump_tjs::wrap_text_operation::actual_text_for (4 samples, 4.44%)</title><rect x="2.2222%" y="405" width="4.4444%" height="15" fill="rgb(251,28,31)" fg:x="2" fg:w="4"/><text x="2.4722%" y="415.50">dump_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 1.11%)</title><rect x="5.5556%" y="389" width="1.1111%" height="15" fill="rgb(233,223,10)" fg:x="5" fg:w="1"/><text x="5.8056%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 1.11%)</title><rect x="5.5556%" y="373" width="1.1111%" height="15" fill="rgb(215,21,27)" fg:x="5" fg:w="1"/><text x="5.8056%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 1.11%)</title><rect x="5.5556%" y="357" width="1.1111%" height="15" fill="rgb(232,23,21)" fg:x="5" fg:w="1"/><text x="5.8056%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 1.11%)</title><rect x="5.5556%" y="341" width="1.1111%" height="15" fill="rgb(244,5,23)" fg:x="5" fg:w="1"/><text x="5.8056%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="5.5556%" y="325" width="1.1111%" height="15" fill="rgb(226,81,46)" fg:x="5" fg:w="1"/><text x="5.8056%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="5.5556%" y="309" width="1.1111%" height="15" fill="rgb(247,70,30)" fg:x="5" fg:w="1"/><text x="5.8056%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="6.6667%" y="373" width="2.2222%" height="15" fill="rgb(212,68,19)" fg:x="6" fg:w="2"/><text x="6.9167%" y="383.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="6.6667%" y="357" width="2.2222%" height="15" fill="rgb(240,187,13)" fg:x="6" fg:w="2"/><text x="6.9167%" y="367.50">b..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (4 samples, 4.44%)</title><rect x="6.6667%" y="389" width="4.4444%" height="15" fill="rgb(223,113,26)" fg:x="6" fg:w="4"/><text x="6.9167%" y="399.50">core:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 2.22%)</title><rect x="8.8889%" y="373" width="2.2222%" height="15" fill="rgb(206,192,2)" fg:x="8" fg:w="2"/><text x="9.1389%" y="383.50">c..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="8.8889%" y="357" width="2.2222%" height="15" fill="rgb(241,108,4)" fg:x="8" fg:w="2"/><text x="9.1389%" y="367.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="8.8889%" y="341" width="2.2222%" height="15" fill="rgb(247,173,49)" fg:x="8" fg:w="2"/><text x="9.1389%" y="351.50">b..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 5.56%)</title><rect x="6.6667%" y="405" width="5.5556%" height="15" fill="rgb(224,114,35)" fg:x="6" fg:w="5"/><text x="6.9167%" y="415.50">&lt;core::..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 1.11%)</title><rect x="11.1111%" y="389" width="1.1111%" height="15" fill="rgb(245,159,27)" fg:x="10" fg:w="1"/><text x="11.3611%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 1.11%)</title><rect x="11.1111%" y="373" width="1.1111%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="1"/><text x="11.3611%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="11.1111%" y="357" width="1.1111%" height="15" fill="rgb(236,23,11)" fg:x="10" fg:w="1"/><text x="11.3611%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="11.1111%" y="341" width="1.1111%" height="15" fill="rgb(205,117,38)" fg:x="10" fg:w="1"/><text x="11.3611%" y="351.50"></text></g><g><title>lopdf::writer::Writer::write_name (2 samples, 2.22%)</title><rect x="12.2222%" y="373" width="2.2222%" height="15" fill="rgb(237,72,25)" fg:x="11" fg:w="2"/><text x="12.4722%" y="383.50">l..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="12.2222%" y="357" width="2.2222%" height="15" fill="rgb(244,70,9)" fg:x="11" fg:w="2"/><text x="12.4722%" y="367.50">s..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="12.2222%" y="341" width="2.2222%" height="15" fill="rgb(217,125,39)" fg:x="11" fg:w="2"/><text x="12.4722%" y="351.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="12.2222%" y="325" width="2.2222%" height="15" fill="rgb(235,36,10)" fg:x="11" fg:w="2"/><text x="12.4722%" y="335.50">b..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 1.11%)</title><rect x="14.4444%" y="341" width="1.1111%" height="15" fill="rgb(251,123,47)" fg:x="13" fg:w="1"/><text x="14.6944%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="14.4444%" y="325" width="1.1111%" height="15" fill="rgb(221,13,13)" fg:x="13" fg:w="1"/><text x="14.6944%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="14.4444%" y="309" width="1.1111%" height="15" fill="rgb(238,131,9)" fg:x="13" fg:w="1"/><text x="14.6944%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.11%)</title><rect x="15.5556%" y="341" width="1.1111%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="1"/><text x="15.8056%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 1.11%)</title><rect x="15.5556%" y="325" width="1.1111%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="1"/><text x="15.8056%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 1.11%)</title><rect x="15.5556%" y="309" width="1.1111%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="1"/><text x="15.8056%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="15.5556%" y="293" width="1.1111%" height="15" fill="rgb(246,228,12)" fg:x="14" fg:w="1"/><text x="15.8056%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="15.5556%" y="277" width="1.1111%" height="15" fill="rgb(213,55,15)" fg:x="14" fg:w="1"/><text x="15.8056%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="16.6667%" y="325" width="1.1111%" height="15" fill="rgb(209,9,3)" fg:x="15" fg:w="1"/><text x="16.9167%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="16.6667%" y="309" width="1.1111%" height="15" fill="rgb(230,59,30)" fg:x="15" fg:w="1"/><text x="16.9167%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="17.7778%" y="197" width="1.1111%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="1"/><text x="18.0278%" y="207.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="17.7778%" y="181" width="1.1111%" height="15" fill="rgb(220,109,13)" fg:x="16" fg:w="1"/><text x="18.0278%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 2.22%)</title><rect x="17.7778%" y="229" width="2.2222%" height="15" fill="rgb(232,18,1)" fg:x="16" fg:w="2"/><text x="18.0278%" y="239.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 2.22%)</title><rect x="17.7778%" y="213" width="2.2222%" height="15" fill="rgb(215,41,42)" fg:x="16" fg:w="2"/><text x="18.0278%" y="223.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 1.11%)</title><rect x="18.8889%" y="197" width="1.1111%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="1"/><text x="19.1389%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="18.8889%" y="181" width="1.1111%" height="15" fill="rgb(240,125,3)" fg:x="17" fg:w="1"/><text x="19.1389%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="18.8889%" y="165" width="1.1111%" height="15" fill="rgb(205,98,50)" fg:x="17" fg:w="1"/><text x="19.1389%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 3.33%)</title><rect x="17.7778%" y="245" width="3.3333%" height="15" fill="rgb(205,185,37)" fg:x="16" fg:w="3"/><text x="18.0278%" y="255.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="20.0000%" y="229" width="1.1111%" height="15" fill="rgb(238,207,15)" fg:x="18" fg:w="1"/><text x="20.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="20.0000%" y="213" width="1.1111%" height="15" fill="rgb(213,199,42)" fg:x="18" fg:w="1"/><text x="20.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 1.11%)</title><rect x="20.0000%" y="197" width="1.1111%" height="15" fill="rgb(235,201,11)" fg:x="18" fg:w="1"/><text x="20.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 1.11%)</title><rect x="20.0000%" y="181" width="1.1111%" height="15" fill="rgb(207,46,11)" fg:x="18" fg:w="1"/><text x="20.2500%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="20.0000%" y="165" width="1.1111%" height="15" fill="rgb(241,35,35)" fg:x="18" fg:w="1"/><text x="20.2500%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="20.0000%" y="149" width="1.1111%" height="15" fill="rgb(243,32,47)" fg:x="18" fg:w="1"/><text x="20.2500%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 4.44%)</title><rect x="17.7778%" y="261" width="4.4444%" height="15" fill="rgb(247,202,23)" fg:x="16" fg:w="4"/><text x="18.0278%" y="271.50">&lt;allo..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 1.11%)</title><rect x="21.1111%" y="245" width="1.1111%" height="15" fill="rgb(219,102,11)" fg:x="19" fg:w="1"/><text x="21.3611%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 1.11%)</title><rect x="21.1111%" y="229" width="1.1111%" height="15" fill="rgb(243,110,44)" fg:x="19" fg:w="1"/><text x="21.3611%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 1.11%)</title><rect x="21.1111%" y="213" width="1.1111%" height="15" fill="rgb(222,74,54)" fg:x="19" fg:w="1"/><text x="21.3611%" y="223.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="21.1111%" y="197" width="1.1111%" height="15" fill="rgb(216,99,12)" fg:x="19" fg:w="1"/><text x="21.3611%" y="207.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="21.1111%" y="181" width="1.1111%" height="15" fill="rgb(226,22,26)" fg:x="19" fg:w="1"/><text x="21.3611%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 5.56%)</title><rect x="17.7778%" y="277" width="5.5556%" height="15" fill="rgb(217,163,10)" fg:x="16" fg:w="5"/><text x="18.0278%" y="287.50">alloc::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 1.11%)</title><rect x="22.2222%" y="261" width="1.1111%" height="15" fill="rgb(213,25,53)" fg:x="20" fg:w="1"/><text x="22.4722%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 1.11%)</title><rect x="22.2222%" y="245" width="1.1111%" height="15" fill="rgb(252,105,26)" fg:x="20" fg:w="1"/><text x="22.4722%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 1.11%)</title><rect x="22.2222%" y="229" width="1.1111%" height="15" fill="rgb(220,39,43)" fg:x="20" fg:w="1"/><text x="22.4722%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1 samples, 1.11%)</title><rect x="22.2222%" y="213" width="1.1111%" height="15" fill="rgb(229,68,48)" fg:x="20" fg:w="1"/><text x="22.4722%" y="223.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="22.2222%" y="197" width="1.1111%" height="15" fill="rgb(252,8,32)" fg:x="20" fg:w="1"/><text x="22.4722%" y="207.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="22.2222%" y="181" width="1.1111%" height="15" fill="rgb(223,20,43)" fg:x="20" fg:w="1"/><text x="22.4722%" y="191.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 6.67%)</title><rect x="17.7778%" y="309" width="6.6667%" height="15" fill="rgb(229,81,49)" fg:x="16" fg:w="6"/><text x="18.0278%" y="319.50">&lt;std::io:..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (6 samples, 6.67%)</title><rect x="17.7778%" y="293" width="6.6667%" height="15" fill="rgb(236,28,36)" fg:x="16" fg:w="6"/><text x="18.0278%" y="303.50">std::io::..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="23.3333%" y="277" width="1.1111%" height="15" fill="rgb(249,185,26)" fg:x="21" fg:w="1"/><text x="23.5833%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="23.3333%" y="261" width="1.1111%" height="15" fill="rgb(249,174,33)" fg:x="21" fg:w="1"/><text x="23.5833%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="24.4444%" y="309" width="1.1111%" height="15" fill="rgb(233,201,37)" fg:x="22" fg:w="1"/><text x="24.6944%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="24.4444%" y="293" width="1.1111%" height="15" fill="rgb(221,78,26)" fg:x="22" fg:w="1"/><text x="24.6944%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="25.5556%" y="245" width="1.1111%" height="15" fill="rgb(250,127,30)" fg:x="23" fg:w="1"/><text x="25.8056%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="25.5556%" y="229" width="1.1111%" height="15" fill="rgb(230,49,44)" fg:x="23" fg:w="1"/><text x="25.8056%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 1.11%)</title><rect x="26.6667%" y="181" width="1.1111%" height="15" fill="rgb(229,67,23)" fg:x="24" fg:w="1"/><text x="26.9167%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="26.6667%" y="165" width="1.1111%" height="15" fill="rgb(249,83,47)" fg:x="24" fg:w="1"/><text x="26.9167%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="26.6667%" y="149" width="1.1111%" height="15" fill="rgb(215,43,3)" fg:x="24" fg:w="1"/><text x="26.9167%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 2.22%)</title><rect x="26.6667%" y="213" width="2.2222%" height="15" fill="rgb(238,154,13)" fg:x="24" fg:w="2"/><text x="26.9167%" y="223.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 2.22%)</title><rect x="26.6667%" y="197" width="2.2222%" height="15" fill="rgb(219,56,2)" fg:x="24" fg:w="2"/><text x="26.9167%" y="207.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="27.7778%" y="181" width="1.1111%" height="15" fill="rgb(233,0,4)" fg:x="25" fg:w="1"/><text x="28.0278%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="27.7778%" y="165" width="1.1111%" height="15" fill="rgb(235,30,7)" fg:x="25" fg:w="1"/><text x="28.0278%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 1.11%)</title><rect x="27.7778%" y="149" width="1.1111%" height="15" fill="rgb(250,79,13)" fg:x="25" fg:w="1"/><text x="28.0278%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 1.11%)</title><rect x="27.7778%" y="133" width="1.1111%" height="15" fill="rgb(211,146,34)" fg:x="25" fg:w="1"/><text x="28.0278%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="27.7778%" y="117" width="1.1111%" height="15" fill="rgb(228,22,38)" fg:x="25" fg:w="1"/><text x="28.0278%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="27.7778%" y="101" width="1.1111%" height="15" fill="rgb(235,168,5)" fg:x="25" fg:w="1"/><text x="28.0278%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 4.44%)</title><rect x="25.5556%" y="261" width="4.4444%" height="15" fill="rgb(221,155,16)" fg:x="23" fg:w="4"/><text x="25.8056%" y="271.50">&lt;std:..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (3 samples, 3.33%)</title><rect x="26.6667%" y="245" width="3.3333%" height="15" fill="rgb(215,215,53)" fg:x="24" fg:w="3"/><text x="26.9167%" y="255.50">std..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 3.33%)</title><rect x="26.6667%" y="229" width="3.3333%" height="15" fill="rgb(223,4,10)" fg:x="24" fg:w="3"/><text x="26.9167%" y="239.50">all..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 1.11%)</title><rect x="28.8889%" y="213" width="1.1111%" height="15" fill="rgb(234,103,6)" fg:x="26" fg:w="1"/><text x="29.1389%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 1.11%)</title><rect x="28.8889%" y="197" width="1.1111%" height="15" fill="rgb(227,97,0)" fg:x="26" fg:w="1"/><text x="29.1389%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 1.11%)</title><rect x="28.8889%" y="181" width="1.1111%" height="15" fill="rgb(234,150,53)" fg:x="26" fg:w="1"/><text x="29.1389%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1 samples, 1.11%)</title><rect x="28.8889%" y="165" width="1.1111%" height="15" fill="rgb(228,201,54)" fg:x="26" fg:w="1"/><text x="29.1389%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="28.8889%" y="149" width="1.1111%" height="15" fill="rgb(222,22,37)" fg:x="26" fg:w="1"/><text x="29.1389%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="28.8889%" y="133" width="1.1111%" height="15" fill="rgb(237,53,32)" fg:x="26" fg:w="1"/><text x="29.1389%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.11%)</title><rect x="30.0000%" y="181" width="1.1111%" height="15" fill="rgb(233,25,53)" fg:x="27" fg:w="1"/><text x="30.2500%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="30.0000%" y="165" width="1.1111%" height="15" fill="rgb(210,40,34)" fg:x="27" fg:w="1"/><text x="30.2500%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="30.0000%" y="149" width="1.1111%" height="15" fill="rgb(241,220,44)" fg:x="27" fg:w="1"/><text x="30.2500%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 1.11%)</title><rect x="30.0000%" y="133" width="1.1111%" height="15" fill="rgb(235,28,35)" fg:x="27" fg:w="1"/><text x="30.2500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 1.11%)</title><rect x="30.0000%" y="117" width="1.1111%" height="15" fill="rgb(210,56,17)" fg:x="27" fg:w="1"/><text x="30.2500%" y="127.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="30.0000%" y="101" width="1.1111%" height="15" fill="rgb(224,130,29)" fg:x="27" fg:w="1"/><text x="30.2500%" y="111.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="30.0000%" y="85" width="1.1111%" height="15" fill="rgb(235,212,8)" fg:x="27" fg:w="1"/><text x="30.2500%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 2.22%)</title><rect x="30.0000%" y="245" width="2.2222%" height="15" fill="rgb(223,33,50)" fg:x="27" fg:w="2"/><text x="30.2500%" y="255.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="30.0000%" y="229" width="2.2222%" height="15" fill="rgb(219,149,13)" fg:x="27" fg:w="2"/><text x="30.2500%" y="239.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 2.22%)</title><rect x="30.0000%" y="213" width="2.2222%" height="15" fill="rgb(250,156,29)" fg:x="27" fg:w="2"/><text x="30.2500%" y="223.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 2.22%)</title><rect x="30.0000%" y="197" width="2.2222%" height="15" fill="rgb(216,193,19)" fg:x="27" fg:w="2"/><text x="30.2500%" y="207.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 1.11%)</title><rect x="31.1111%" y="181" width="1.1111%" height="15" fill="rgb(216,135,14)" fg:x="28" fg:w="1"/><text x="31.3611%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 1.11%)</title><rect x="31.1111%" y="165" width="1.1111%" height="15" fill="rgb(241,47,5)" fg:x="28" fg:w="1"/><text x="31.3611%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="31.1111%" y="149" width="1.1111%" height="15" fill="rgb(233,42,35)" fg:x="28" fg:w="1"/><text x="31.3611%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="31.1111%" y="133" width="1.1111%" height="15" fill="rgb(231,13,6)" fg:x="28" fg:w="1"/><text x="31.3611%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="32.2222%" y="245" width="1.1111%" height="15" fill="rgb(207,181,40)" fg:x="29" fg:w="1"/><text x="32.4722%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="32.2222%" y="229" width="1.1111%" height="15" fill="rgb(254,173,49)" fg:x="29" fg:w="1"/><text x="32.4722%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="33.3333%" y="133" width="1.1111%" height="15" fill="rgb(221,1,38)" fg:x="30" fg:w="1"/><text x="33.5833%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="33.3333%" y="117" width="1.1111%" height="15" fill="rgb(206,124,46)" fg:x="30" fg:w="1"/><text x="33.5833%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="33.3333%" y="101" width="1.1111%" height="15" fill="rgb(249,21,11)" fg:x="30" fg:w="1"/><text x="33.5833%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 2.22%)</title><rect x="33.3333%" y="165" width="2.2222%" height="15" fill="rgb(222,201,40)" fg:x="30" fg:w="2"/><text x="33.5833%" y="175.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 2.22%)</title><rect x="33.3333%" y="149" width="2.2222%" height="15" fill="rgb(235,61,29)" fg:x="30" fg:w="2"/><text x="33.5833%" y="159.50">a..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="34.4444%" y="133" width="1.1111%" height="15" fill="rgb(219,207,3)" fg:x="31" fg:w="1"/><text x="34.6944%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="34.4444%" y="117" width="1.1111%" height="15" fill="rgb(222,56,46)" fg:x="31" fg:w="1"/><text x="34.6944%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 3.33%)</title><rect x="33.3333%" y="181" width="3.3333%" height="15" fill="rgb(239,76,54)" fg:x="30" fg:w="3"/><text x="33.5833%" y="191.50">all..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="35.5556%" y="165" width="1.1111%" height="15" fill="rgb(231,124,27)" fg:x="32" fg:w="1"/><text x="35.8056%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="35.5556%" y="149" width="1.1111%" height="15" fill="rgb(249,195,6)" fg:x="32" fg:w="1"/><text x="35.8056%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 4.44%)</title><rect x="33.3333%" y="213" width="4.4444%" height="15" fill="rgb(237,174,47)" fg:x="30" fg:w="4"/><text x="33.5833%" y="223.50">&lt;std:..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (4 samples, 4.44%)</title><rect x="33.3333%" y="197" width="4.4444%" height="15" fill="rgb(206,201,31)" fg:x="30" fg:w="4"/><text x="33.5833%" y="207.50">std::..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="36.6667%" y="181" width="1.1111%" height="15" fill="rgb(231,57,52)" fg:x="33" fg:w="1"/><text x="36.9167%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="36.6667%" y="165" width="1.1111%" height="15" fill="rgb(248,177,22)" fg:x="33" fg:w="1"/><text x="36.9167%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 1.11%)</title><rect x="37.7778%" y="165" width="1.1111%" height="15" fill="rgb(215,211,37)" fg:x="34" fg:w="1"/><text x="38.0278%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 1.11%)</title><rect x="37.7778%" y="149" width="1.1111%" height="15" fill="rgb(241,128,51)" fg:x="34" fg:w="1"/><text x="38.0278%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 1.11%)</title><rect x="37.7778%" y="133" width="1.1111%" height="15" fill="rgb(227,165,31)" fg:x="34" fg:w="1"/><text x="38.0278%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="37.7778%" y="117" width="1.1111%" height="15" fill="rgb(228,167,24)" fg:x="34" fg:w="1"/><text x="38.0278%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="37.7778%" y="101" width="1.1111%" height="15" fill="rgb(228,143,12)" fg:x="34" fg:w="1"/><text x="38.0278%" y="111.50"></text></g><g><title>std::io::Write::write_fmt (21 samples, 23.33%)</title><rect x="16.6667%" y="341" width="23.3333%" height="15" fill="rgb(249,149,8)" fg:x="15" fg:w="21"/><text x="16.9167%" y="351.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (20 samples, 22.22%)</title><rect x="17.7778%" y="325" width="22.2222%" height="15" fill="rgb(243,35,44)" fg:x="16" fg:w="20"/><text x="18.0278%" y="335.50">core::fmt::write</text></g><g><title>core::fmt::run (13 samples, 14.44%)</title><rect x="25.5556%" y="309" width="14.4444%" height="15" fill="rgb(246,89,9)" fg:x="23" fg:w="13"/><text x="25.8056%" y="319.50">core::fmt::run</text></g><g><title>core::fmt::num::&lt;impl core::fmt::UpperHex for i8&gt;::fmt (13 samples, 14.44%)</title><rect x="25.5556%" y="293" width="14.4444%" height="15" fill="rgb(233,213,13)" fg:x="23" fg:w="13"/><text x="25.8056%" y="303.50">core::fmt::num::&lt;impl ..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (13 samples, 14.44%)</title><rect x="25.5556%" y="277" width="14.4444%" height="15" fill="rgb(233,141,41)" fg:x="23" fg:w="13"/><text x="25.8056%" y="287.50">core::fmt::num::Generi..</text></g><g><title>core::fmt::Formatter::pad_integral (9 samples, 10.00%)</title><rect x="30.0000%" y="261" width="10.0000%" height="15" fill="rgb(239,167,4)" fg:x="27" fg:w="9"/><text x="30.2500%" y="271.50">core::fmt::For..</text></g><g><title>core::fmt::Formatter::padding (6 samples, 6.67%)</title><rect x="33.3333%" y="245" width="6.6667%" height="15" fill="rgb(209,217,16)" fg:x="30" fg:w="6"/><text x="33.5833%" y="255.50">core::fmt..</text></g><g><title>core::fmt::Write::write_char (6 samples, 6.67%)</title><rect x="33.3333%" y="229" width="6.6667%" height="15" fill="rgb(219,88,35)" fg:x="30" fg:w="6"/><text x="33.5833%" y="239.50">core::fmt..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (2 samples, 2.22%)</title><rect x="37.7778%" y="213" width="2.2222%" height="15" fill="rgb(220,193,23)" fg:x="34" fg:w="2"/><text x="38.0278%" y="223.50">c..</text></g><g><title>core::char::methods::encode_utf8_raw (2 samples, 2.22%)</title><rect x="37.7778%" y="197" width="2.2222%" height="15" fill="rgb(230,90,52)" fg:x="34" fg:w="2"/><text x="38.0278%" y="207.50">c..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 2.22%)</title><rect x="37.7778%" y="181" width="2.2222%" height="15" fill="rgb(252,106,19)" fg:x="34" fg:w="2"/><text x="38.0278%" y="191.50">c..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="38.8889%" y="165" width="1.1111%" height="15" fill="rgb(206,74,20)" fg:x="35" fg:w="1"/><text x="39.1389%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="38.8889%" y="149" width="1.1111%" height="15" fill="rgb(230,138,44)" fg:x="35" fg:w="1"/><text x="39.1389%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 1.11%)</title><rect x="40.0000%" y="309" width="1.1111%" height="15" fill="rgb(235,182,43)" fg:x="36" fg:w="1"/><text x="40.2500%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.11%)</title><rect x="40.0000%" y="293" width="1.1111%" height="15" fill="rgb(242,16,51)" fg:x="36" fg:w="1"/><text x="40.2500%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 1.11%)</title><rect x="40.0000%" y="277" width="1.1111%" height="15" fill="rgb(248,9,4)" fg:x="36" fg:w="1"/><text x="40.2500%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 1.11%)</title><rect x="40.0000%" y="261" width="1.1111%" height="15" fill="rgb(210,31,22)" fg:x="36" fg:w="1"/><text x="40.2500%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 1.11%)</title><rect x="40.0000%" y="245" width="1.1111%" height="15" fill="rgb(239,54,39)" fg:x="36" fg:w="1"/><text x="40.2500%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="40.0000%" y="229" width="1.1111%" height="15" fill="rgb(230,99,41)" fg:x="36" fg:w="1"/><text x="40.2500%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="40.0000%" y="213" width="1.1111%" height="15" fill="rgb(253,106,12)" fg:x="36" fg:w="1"/><text x="40.2500%" y="223.50"></text></g><g><title>lopdf::writer::Writer::write_dictionary (27 samples, 30.00%)</title><rect x="12.2222%" y="389" width="30.0000%" height="15" fill="rgb(213,46,41)" fg:x="11" fg:w="27"/><text x="12.4722%" y="399.50">lopdf::writer::Writer::write_dictionary</text></g><g><title>lopdf::writer::Writer::write_object (25 samples, 27.78%)</title><rect x="14.4444%" y="373" width="27.7778%" height="15" fill="rgb(215,133,35)" fg:x="13" fg:w="25"/><text x="14.6944%" y="383.50">lopdf::writer::Writer::write_object</text></g><g><title>lopdf::writer::Writer::write_string (25 samples, 27.78%)</title><rect x="14.4444%" y="357" width="27.7778%" height="15" fill="rgb(213,28,5)" fg:x="13" fg:w="25"/><text x="14.6944%" y="367.50">lopdf::writer::Writer::write_string</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="40.0000%" y="341" width="2.2222%" height="15" fill="rgb(215,77,49)" fg:x="36" fg:w="2"/><text x="40.2500%" y="351.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 2.22%)</title><rect x="40.0000%" y="325" width="2.2222%" height="15" fill="rgb(248,100,22)" fg:x="36" fg:w="2"/><text x="40.2500%" y="335.50">a..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 1.11%)</title><rect x="41.1111%" y="309" width="1.1111%" height="15" fill="rgb(208,67,9)" fg:x="37" fg:w="1"/><text x="41.3611%" y="319.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 1.11%)</title><rect x="41.1111%" y="293" width="1.1111%" height="15" fill="rgb(219,133,21)" fg:x="37" fg:w="1"/><text x="41.3611%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 1.11%)</title><rect x="41.1111%" y="277" width="1.1111%" height="15" fill="rgb(246,46,29)" fg:x="37" fg:w="1"/><text x="41.3611%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1 samples, 1.11%)</title><rect x="41.1111%" y="261" width="1.1111%" height="15" fill="rgb(246,185,52)" fg:x="37" fg:w="1"/><text x="41.3611%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="41.1111%" y="245" width="1.1111%" height="15" fill="rgb(252,136,11)" fg:x="37" fg:w="1"/><text x="41.3611%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="41.1111%" y="229" width="1.1111%" height="15" fill="rgb(219,138,53)" fg:x="37" fg:w="1"/><text x="41.3611%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="42.2222%" y="373" width="2.2222%" height="15" fill="rgb(211,51,23)" fg:x="38" fg:w="2"/><text x="42.4722%" y="383.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="42.2222%" y="357" width="2.2222%" height="15" fill="rgb(247,221,28)" fg:x="38" fg:w="2"/><text x="42.4722%" y="367.50">b..</text></g><g><title>lopdf::writer::Writer::write_name (4 samples, 4.44%)</title><rect x="42.2222%" y="389" width="4.4444%" height="15" fill="rgb(251,222,45)" fg:x="38" fg:w="4"/><text x="42.4722%" y="399.50">lopdf..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="44.4444%" y="373" width="2.2222%" height="15" fill="rgb(217,162,53)" fg:x="40" fg:w="2"/><text x="44.6944%" y="383.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 2.22%)</title><rect x="44.4444%" y="357" width="2.2222%" height="15" fill="rgb(229,93,14)" fg:x="40" fg:w="2"/><text x="44.6944%" y="367.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 2.22%)</title><rect x="44.4444%" y="341" width="2.2222%" height="15" fill="rgb(209,67,49)" fg:x="40" fg:w="2"/><text x="44.6944%" y="351.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 2.22%)</title><rect x="44.4444%" y="325" width="2.2222%" height="15" fill="rgb(213,87,29)" fg:x="40" fg:w="2"/><text x="44.6944%" y="335.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 2.22%)</title><rect x="44.4444%" y="309" width="2.2222%" height="15" fill="rgb(205,151,52)" fg:x="40" fg:w="2"/><text x="44.6944%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 2.22%)</title><rect x="44.4444%" y="293" width="2.2222%" height="15" fill="rgb(253,215,39)" fg:x="40" fg:w="2"/><text x="44.6944%" y="303.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 2.22%)</title><rect x="44.4444%" y="277" width="2.2222%" height="15" fill="rgb(221,220,41)" fg:x="40" fg:w="2"/><text x="44.6944%" y="287.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 2.22%)</title><rect x="44.4444%" y="261" width="2.2222%" height="15" fill="rgb(218,133,21)" fg:x="40" fg:w="2"/><text x="44.6944%" y="271.50">a..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="44.4444%" y="245" width="2.2222%" height="15" fill="rgb(221,193,43)" fg:x="40" fg:w="2"/><text x="44.6944%" y="255.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="44.4444%" y="229" width="2.2222%" height="15" fill="rgb(240,128,52)" fg:x="40" fg:w="2"/><text x="44.6944%" y="239.50">b..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="46.6667%" y="357" width="1.1111%" height="15" fill="rgb(253,114,12)" fg:x="42" fg:w="1"/><text x="46.9167%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="46.6667%" y="341" width="1.1111%" height="15" fill="rgb(215,223,47)" fg:x="42" fg:w="1"/><text x="46.9167%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 2.22%)</title><rect x="46.6667%" y="373" width="2.2222%" height="15" fill="rgb(248,225,23)" fg:x="42" fg:w="2"/><text x="46.9167%" y="383.50">&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 1.11%)</title><rect x="47.7778%" y="357" width="1.1111%" height="15" fill="rgb(250,108,0)" fg:x="43" fg:w="1"/><text x="48.0278%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 1.11%)</title><rect x="47.7778%" y="341" width="1.1111%" height="15" fill="rgb(228,208,7)" fg:x="43" fg:w="1"/><text x="48.0278%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="47.7778%" y="325" width="1.1111%" height="15" fill="rgb(244,45,10)" fg:x="43" fg:w="1"/><text x="48.0278%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="47.7778%" y="309" width="1.1111%" height="15" fill="rgb(207,125,25)" fg:x="43" fg:w="1"/><text x="48.0278%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="48.8889%" y="373" width="1.1111%" height="15" fill="rgb(210,195,18)" fg:x="44" fg:w="1"/><text x="49.1389%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="48.8889%" y="357" width="1.1111%" height="15" fill="rgb(249,80,12)" fg:x="44" fg:w="1"/><text x="49.1389%" y="367.50"></text></g><g><title>core::fmt::Arguments::new_v1_formatted (1 samples, 1.11%)</title><rect x="50.0000%" y="373" width="1.1111%" height="15" fill="rgb(221,65,9)" fg:x="45" fg:w="1"/><text x="50.2500%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="50.0000%" y="357" width="1.1111%" height="15" fill="rgb(235,49,36)" fg:x="45" fg:w="1"/><text x="50.2500%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="50.0000%" y="341" width="1.1111%" height="15" fill="rgb(225,32,20)" fg:x="45" fg:w="1"/><text x="50.2500%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="51.1111%" y="325" width="1.1111%" height="15" fill="rgb(215,141,46)" fg:x="46" fg:w="1"/><text x="51.3611%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="51.1111%" y="309" width="1.1111%" height="15" fill="rgb(250,160,47)" fg:x="46" fg:w="1"/><text x="51.3611%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 1.11%)</title><rect x="52.2222%" y="261" width="1.1111%" height="15" fill="rgb(216,222,40)" fg:x="47" fg:w="1"/><text x="52.4722%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 1.11%)</title><rect x="52.2222%" y="245" width="1.1111%" height="15" fill="rgb(234,217,39)" fg:x="47" fg:w="1"/><text x="52.4722%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="52.2222%" y="229" width="1.1111%" height="15" fill="rgb(207,178,40)" fg:x="47" fg:w="1"/><text x="52.4722%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="52.2222%" y="213" width="1.1111%" height="15" fill="rgb(221,136,13)" fg:x="47" fg:w="1"/><text x="52.4722%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 1.11%)</title><rect x="53.3333%" y="261" width="1.1111%" height="15" fill="rgb(249,199,10)" fg:x="48" fg:w="1"/><text x="53.5833%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 1.11%)</title><rect x="53.3333%" y="245" width="1.1111%" height="15" fill="rgb(249,222,13)" fg:x="48" fg:w="1"/><text x="53.5833%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="53.3333%" y="229" width="1.1111%" height="15" fill="rgb(244,185,38)" fg:x="48" fg:w="1"/><text x="53.5833%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="53.3333%" y="213" width="1.1111%" height="15" fill="rgb(236,202,9)" fg:x="48" fg:w="1"/><text x="53.5833%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 3.33%)</title><rect x="52.2222%" y="277" width="3.3333%" height="15" fill="rgb(250,229,37)" fg:x="47" fg:w="3"/><text x="52.4722%" y="287.50">all..</text></g><g><title>core::slice::&lt;impl [T]&gt;::len (1 samples, 1.11%)</title><rect x="54.4444%" y="261" width="1.1111%" height="15" fill="rgb(206,174,23)" fg:x="49" fg:w="1"/><text x="54.6944%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="54.4444%" y="245" width="1.1111%" height="15" fill="rgb(211,33,43)" fg:x="49" fg:w="1"/><text x="54.6944%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="54.4444%" y="229" width="1.1111%" height="15" fill="rgb(245,58,50)" fg:x="49" fg:w="1"/><text x="54.6944%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 4.44%)</title><rect x="52.2222%" y="293" width="4.4444%" height="15" fill="rgb(244,68,36)" fg:x="47" fg:w="4"/><text x="52.4722%" y="303.50">&lt;allo..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="55.5556%" y="277" width="1.1111%" height="15" fill="rgb(232,229,15)" fg:x="50" fg:w="1"/><text x="55.8056%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="55.5556%" y="261" width="1.1111%" height="15" fill="rgb(254,30,23)" fg:x="50" fg:w="1"/><text x="55.8056%" y="271.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 6.67%)</title><rect x="51.1111%" y="341" width="6.6667%" height="15" fill="rgb(235,160,14)" fg:x="46" fg:w="6"/><text x="51.3611%" y="351.50">&lt;std::io:..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (5 samples, 5.56%)</title><rect x="52.2222%" y="325" width="5.5556%" height="15" fill="rgb(212,155,44)" fg:x="47" fg:w="5"/><text x="52.4722%" y="335.50">std::io..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 5.56%)</title><rect x="52.2222%" y="309" width="5.5556%" height="15" fill="rgb(226,2,50)" fg:x="47" fg:w="5"/><text x="52.4722%" y="319.50">alloc::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 1.11%)</title><rect x="56.6667%" y="293" width="1.1111%" height="15" fill="rgb(234,177,6)" fg:x="51" fg:w="1"/><text x="56.9167%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 1.11%)</title><rect x="56.6667%" y="277" width="1.1111%" height="15" fill="rgb(217,24,9)" fg:x="51" fg:w="1"/><text x="56.9167%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 1.11%)</title><rect x="56.6667%" y="261" width="1.1111%" height="15" fill="rgb(220,13,46)" fg:x="51" fg:w="1"/><text x="56.9167%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="56.6667%" y="245" width="1.1111%" height="15" fill="rgb(239,221,27)" fg:x="51" fg:w="1"/><text x="56.9167%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="56.6667%" y="229" width="1.1111%" height="15" fill="rgb(222,198,25)" fg:x="51" fg:w="1"/><text x="56.9167%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 1.11%)</title><rect x="57.7778%" y="325" width="1.1111%" height="15" fill="rgb(211,99,13)" fg:x="52" fg:w="1"/><text x="58.0278%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="57.7778%" y="309" width="1.1111%" height="15" fill="rgb(232,111,31)" fg:x="52" fg:w="1"/><text x="58.0278%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="57.7778%" y="293" width="1.1111%" height="15" fill="rgb(245,82,37)" fg:x="52" fg:w="1"/><text x="58.0278%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 1.11%)</title><rect x="58.8889%" y="245" width="1.1111%" height="15" fill="rgb(227,149,46)" fg:x="53" fg:w="1"/><text x="59.1389%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.11%)</title><rect x="58.8889%" y="229" width="1.1111%" height="15" fill="rgb(218,36,50)" fg:x="53" fg:w="1"/><text x="59.1389%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="58.8889%" y="213" width="1.1111%" height="15" fill="rgb(226,80,48)" fg:x="53" fg:w="1"/><text x="59.1389%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="58.8889%" y="197" width="1.1111%" height="15" fill="rgb(238,224,15)" fg:x="53" fg:w="1"/><text x="59.1389%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 1.11%)</title><rect x="58.8889%" y="181" width="1.1111%" height="15" fill="rgb(241,136,10)" fg:x="53" fg:w="1"/><text x="59.1389%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="58.8889%" y="165" width="1.1111%" height="15" fill="rgb(208,32,45)" fg:x="53" fg:w="1"/><text x="59.1389%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="58.8889%" y="149" width="1.1111%" height="15" fill="rgb(207,135,9)" fg:x="53" fg:w="1"/><text x="59.1389%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 2.22%)</title><rect x="58.8889%" y="293" width="2.2222%" height="15" fill="rgb(206,86,44)" fg:x="53" fg:w="2"/><text x="59.1389%" y="303.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="58.8889%" y="277" width="2.2222%" height="15" fill="rgb(245,177,15)" fg:x="53" fg:w="2"/><text x="59.1389%" y="287.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 2.22%)</title><rect x="58.8889%" y="261" width="2.2222%" height="15" fill="rgb(206,64,50)" fg:x="53" fg:w="2"/><text x="59.1389%" y="271.50">a..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 1.11%)</title><rect x="60.0000%" y="245" width="1.1111%" height="15" fill="rgb(234,36,40)" fg:x="54" fg:w="1"/><text x="60.2500%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 1.11%)</title><rect x="60.0000%" y="229" width="1.1111%" height="15" fill="rgb(213,64,8)" fg:x="54" fg:w="1"/><text x="60.2500%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="60.0000%" y="213" width="1.1111%" height="15" fill="rgb(210,75,36)" fg:x="54" fg:w="1"/><text x="60.2500%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="60.0000%" y="197" width="1.1111%" height="15" fill="rgb(229,88,21)" fg:x="54" fg:w="1"/><text x="60.2500%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 1.11%)</title><rect x="61.1111%" y="229" width="1.1111%" height="15" fill="rgb(252,204,47)" fg:x="55" fg:w="1"/><text x="61.3611%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.11%)</title><rect x="61.1111%" y="213" width="1.1111%" height="15" fill="rgb(208,77,27)" fg:x="55" fg:w="1"/><text x="61.3611%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 1.11%)</title><rect x="61.1111%" y="197" width="1.1111%" height="15" fill="rgb(221,76,26)" fg:x="55" fg:w="1"/><text x="61.3611%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="61.1111%" y="181" width="1.1111%" height="15" fill="rgb(225,139,18)" fg:x="55" fg:w="1"/><text x="61.3611%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="61.1111%" y="165" width="1.1111%" height="15" fill="rgb(230,137,11)" fg:x="55" fg:w="1"/><text x="61.3611%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 2.22%)</title><rect x="61.1111%" y="277" width="2.2222%" height="15" fill="rgb(212,28,1)" fg:x="55" fg:w="2"/><text x="61.3611%" y="287.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="61.1111%" y="261" width="2.2222%" height="15" fill="rgb(248,164,17)" fg:x="55" fg:w="2"/><text x="61.3611%" y="271.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 2.22%)</title><rect x="61.1111%" y="245" width="2.2222%" height="15" fill="rgb(222,171,42)" fg:x="55" fg:w="2"/><text x="61.3611%" y="255.50">a..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="62.2222%" y="229" width="1.1111%" height="15" fill="rgb(243,84,45)" fg:x="56" fg:w="1"/><text x="62.4722%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="62.2222%" y="213" width="1.1111%" height="15" fill="rgb(252,49,23)" fg:x="56" fg:w="1"/><text x="62.4722%" y="223.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="63.3333%" y="261" width="1.1111%" height="15" fill="rgb(215,19,7)" fg:x="57" fg:w="1"/><text x="63.5833%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="63.3333%" y="245" width="1.1111%" height="15" fill="rgb(238,81,41)" fg:x="57" fg:w="1"/><text x="63.5833%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="64.4444%" y="229" width="2.2222%" height="15" fill="rgb(210,199,37)" fg:x="58" fg:w="2"/><text x="64.6944%" y="239.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="64.4444%" y="213" width="2.2222%" height="15" fill="rgb(244,192,49)" fg:x="58" fg:w="2"/><text x="64.6944%" y="223.50">b..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="66.6667%" y="149" width="1.1111%" height="15" fill="rgb(226,211,11)" fg:x="60" fg:w="1"/><text x="66.9167%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="66.6667%" y="133" width="1.1111%" height="15" fill="rgb(236,162,54)" fg:x="60" fg:w="1"/><text x="66.9167%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 2.22%)</title><rect x="66.6667%" y="181" width="2.2222%" height="15" fill="rgb(220,229,9)" fg:x="60" fg:w="2"/><text x="66.9167%" y="191.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 2.22%)</title><rect x="66.6667%" y="165" width="2.2222%" height="15" fill="rgb(250,87,22)" fg:x="60" fg:w="2"/><text x="66.9167%" y="175.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 1.11%)</title><rect x="67.7778%" y="149" width="1.1111%" height="15" fill="rgb(239,43,17)" fg:x="61" fg:w="1"/><text x="68.0278%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="67.7778%" y="133" width="1.1111%" height="15" fill="rgb(231,177,25)" fg:x="61" fg:w="1"/><text x="68.0278%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="67.7778%" y="117" width="1.1111%" height="15" fill="rgb(219,179,1)" fg:x="61" fg:w="1"/><text x="68.0278%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 3.33%)</title><rect x="66.6667%" y="213" width="3.3333%" height="15" fill="rgb(238,219,53)" fg:x="60" fg:w="3"/><text x="66.9167%" y="223.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 3.33%)</title><rect x="66.6667%" y="197" width="3.3333%" height="15" fill="rgb(232,167,36)" fg:x="60" fg:w="3"/><text x="66.9167%" y="207.50">&lt;al..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 1.11%)</title><rect x="68.8889%" y="181" width="1.1111%" height="15" fill="rgb(244,19,51)" fg:x="62" fg:w="1"/><text x="69.1389%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 1.11%)</title><rect x="68.8889%" y="165" width="1.1111%" height="15" fill="rgb(224,6,22)" fg:x="62" fg:w="1"/><text x="69.1389%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 1.11%)</title><rect x="68.8889%" y="149" width="1.1111%" height="15" fill="rgb(224,145,5)" fg:x="62" fg:w="1"/><text x="69.1389%" y="159.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 1.11%)</title><rect x="68.8889%" y="133" width="1.1111%" height="15" fill="rgb(234,130,49)" fg:x="62" fg:w="1"/><text x="69.1389%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="68.8889%" y="117" width="1.1111%" height="15" fill="rgb(254,6,2)" fg:x="62" fg:w="1"/><text x="69.1389%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="68.8889%" y="101" width="1.1111%" height="15" fill="rgb(208,96,46)" fg:x="62" fg:w="1"/><text x="69.1389%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 7.78%)</title><rect x="64.4444%" y="245" width="7.7778%" height="15" fill="rgb(239,3,39)" fg:x="58" fg:w="7"/><text x="64.6944%" y="255.50">&lt;std::io::W..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (5 samples, 5.56%)</title><rect x="66.6667%" y="229" width="5.5556%" height="15" fill="rgb(233,210,1)" fg:x="60" fg:w="5"/><text x="66.9167%" y="239.50">std::io..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.22%)</title><rect x="70.0000%" y="213" width="2.2222%" height="15" fill="rgb(244,137,37)" fg:x="63" fg:w="2"/><text x="70.2500%" y="223.50">b..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.22%)</title><rect x="70.0000%" y="197" width="2.2222%" height="15" fill="rgb(240,136,2)" fg:x="63" fg:w="2"/><text x="70.2500%" y="207.50">b..</text></g><g><title>std::io::Write::write_fmt (20 samples, 22.22%)</title><rect x="51.1111%" y="373" width="22.2222%" height="15" fill="rgb(239,18,37)" fg:x="46" fg:w="20"/><text x="51.3611%" y="383.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (20 samples, 22.22%)</title><rect x="51.1111%" y="357" width="22.2222%" height="15" fill="rgb(218,185,22)" fg:x="46" fg:w="20"/><text x="51.3611%" y="367.50">core::fmt::write</text></g><g><title>core::fmt::run (14 samples, 15.56%)</title><rect x="57.7778%" y="341" width="15.5556%" height="15" fill="rgb(225,218,4)" fg:x="52" fg:w="14"/><text x="58.0278%" y="351.50">core::fmt::run</text></g><g><title>core::fmt::num::&lt;impl core::fmt::UpperHex for i8&gt;::fmt (13 samples, 14.44%)</title><rect x="58.8889%" y="325" width="14.4444%" height="15" fill="rgb(230,182,32)" fg:x="53" fg:w="13"/><text x="59.1389%" y="335.50">core::fmt::num::&lt;impl ..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (13 samples, 14.44%)</title><rect x="58.8889%" y="309" width="14.4444%" height="15" fill="rgb(242,56,43)" fg:x="53" fg:w="13"/><text x="59.1389%" y="319.50">core::fmt::num::Generi..</text></g><g><title>core::fmt::Formatter::pad_integral (11 samples, 12.22%)</title><rect x="61.1111%" y="293" width="12.2222%" height="15" fill="rgb(233,99,24)" fg:x="55" fg:w="11"/><text x="61.3611%" y="303.50">core::fmt::Formatt..</text></g><g><title>core::fmt::Formatter::padding (9 samples, 10.00%)</title><rect x="63.3333%" y="277" width="10.0000%" height="15" fill="rgb(234,209,42)" fg:x="57" fg:w="9"/><text x="63.5833%" y="287.50">core::fmt::For..</text></g><g><title>core::fmt::Write::write_char (8 samples, 8.89%)</title><rect x="64.4444%" y="261" width="8.8889%" height="15" fill="rgb(227,7,12)" fg:x="58" fg:w="8"/><text x="64.6944%" y="271.50">core::fmt::Wr..</text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (1 samples, 1.11%)</title><rect x="72.2222%" y="245" width="1.1111%" height="15" fill="rgb(245,203,43)" fg:x="65" fg:w="1"/><text x="72.4722%" y="255.50"></text></g><g><title>core::char::methods::encode_utf8_raw (1 samples, 1.11%)</title><rect x="72.2222%" y="229" width="1.1111%" height="15" fill="rgb(238,205,33)" fg:x="65" fg:w="1"/><text x="72.4722%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 1.11%)</title><rect x="72.2222%" y="213" width="1.1111%" height="15" fill="rgb(231,56,7)" fg:x="65" fg:w="1"/><text x="72.4722%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 1.11%)</title><rect x="72.2222%" y="197" width="1.1111%" height="15" fill="rgb(244,186,29)" fg:x="65" fg:w="1"/><text x="72.4722%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 1.11%)</title><rect x="72.2222%" y="181" width="1.1111%" height="15" fill="rgb(234,111,31)" fg:x="65" fg:w="1"/><text x="72.4722%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 1.11%)</title><rect x="72.2222%" y="165" width="1.1111%" height="15" fill="rgb(241,149,10)" fg:x="65" fg:w="1"/><text x="72.4722%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="72.2222%" y="149" width="1.1111%" height="15" fill="rgb(249,206,44)" fg:x="65" fg:w="1"/><text x="72.4722%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="72.2222%" y="133" width="1.1111%" height="15" fill="rgb(251,153,30)" fg:x="65" fg:w="1"/><text x="72.4722%" y="143.50"></text></g><g><title>lopdf::writer::Writer::write_string (25 samples, 27.78%)</title><rect x="46.6667%" y="389" width="27.7778%" height="15" fill="rgb(239,152,38)" fg:x="42" fg:w="25"/><text x="46.9167%" y="399.50">lopdf::writer::Writer::write_string</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (1 samples, 1.11%)</title><rect x="73.3333%" y="373" width="1.1111%" height="15" fill="rgb(249,139,47)" fg:x="66" fg:w="1"/><text x="73.5833%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 1.11%)</title><rect x="73.3333%" y="357" width="1.1111%" height="15" fill="rgb(244,64,35)" fg:x="66" fg:w="1"/><text x="73.5833%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 1.11%)</title><rect x="73.3333%" y="341" width="1.1111%" height="15" fill="rgb(216,46,15)" fg:x="66" fg:w="1"/><text x="73.5833%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.11%)</title><rect x="73.3333%" y="325" width="1.1111%" height="15" fill="rgb(250,74,19)" fg:x="66" fg:w="1"/><text x="73.5833%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.11%)</title><rect x="73.3333%" y="309" width="1.1111%" height="15" fill="rgb(249,42,33)" fg:x="66" fg:w="1"/><text x="73.5833%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="73.3333%" y="293" width="1.1111%" height="15" fill="rgb(242,149,17)" fg:x="66" fg:w="1"/><text x="73.5833%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="73.3333%" y="277" width="1.1111%" height="15" fill="rgb(244,29,21)" fg:x="66" fg:w="1"/><text x="73.5833%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 1.11%)</title><rect x="74.4444%" y="357" width="1.1111%" height="15" fill="rgb(220,130,37)" fg:x="67" fg:w="1"/><text x="74.6944%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 1.11%)</title><rect x="74.4444%" y="341" width="1.1111%" height="15" fill="rgb(211,67,2)" fg:x="67" fg:w="1"/><text x="74.6944%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 1.11%)</title><rect x="74.4444%" y="325" width="1.1111%" height="15" fill="rgb(235,68,52)" fg:x="67" fg:w="1"/><text x="74.6944%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="74.4444%" y="309" width="1.1111%" height="15" fill="rgb(246,142,3)" fg:x="67" fg:w="1"/><text x="74.6944%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="74.4444%" y="293" width="1.1111%" height="15" fill="rgb(241,25,7)" fg:x="67" fg:w="1"/><text x="74.6944%" y="303.50"></text></g><g><title>lopdf::writer::Writer::write_object (58 samples, 64.44%)</title><rect x="12.2222%" y="405" width="64.4444%" height="15" fill="rgb(242,119,39)" fg:x="11" fg:w="58"/><text x="12.4722%" y="415.50">lopdf::writer::Writer::write_object</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (2 samples, 2.22%)</title><rect x="74.4444%" y="389" width="2.2222%" height="15" fill="rgb(241,98,45)" fg:x="67" fg:w="2"/><text x="74.6944%" y="399.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 2.22%)</title><rect x="74.4444%" y="373" width="2.2222%" height="15" fill="rgb(254,28,30)" fg:x="67" fg:w="2"/><text x="74.6944%" y="383.50">a..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 1.11%)</title><rect x="75.5556%" y="357" width="1.1111%" height="15" fill="rgb(241,142,54)" fg:x="68" fg:w="1"/><text x="75.8056%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 1.11%)</title><rect x="75.5556%" y="341" width="1.1111%" height="15" fill="rgb(222,85,15)" fg:x="68" fg:w="1"/><text x="75.8056%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="75.5556%" y="325" width="1.1111%" height="15" fill="rgb(210,85,47)" fg:x="68" fg:w="1"/><text x="75.8056%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="75.5556%" y="309" width="1.1111%" height="15" fill="rgb(224,206,25)" fg:x="68" fg:w="1"/><text x="75.8056%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 1.11%)</title><rect x="76.6667%" y="341" width="1.1111%" height="15" fill="rgb(243,201,19)" fg:x="69" fg:w="1"/><text x="76.9167%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="76.6667%" y="325" width="1.1111%" height="15" fill="rgb(236,59,4)" fg:x="69" fg:w="1"/><text x="76.9167%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="76.6667%" y="309" width="1.1111%" height="15" fill="rgb(254,179,45)" fg:x="69" fg:w="1"/><text x="76.9167%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 1.11%)</title><rect x="77.7778%" y="341" width="1.1111%" height="15" fill="rgb(226,14,10)" fg:x="70" fg:w="1"/><text x="78.0278%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="77.7778%" y="325" width="1.1111%" height="15" fill="rgb(244,27,41)" fg:x="70" fg:w="1"/><text x="78.0278%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="77.7778%" y="309" width="1.1111%" height="15" fill="rgb(235,35,32)" fg:x="70" fg:w="1"/><text x="78.0278%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 3.33%)</title><rect x="76.6667%" y="357" width="3.3333%" height="15" fill="rgb(218,68,31)" fg:x="69" fg:w="3"/><text x="76.9167%" y="367.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.11%)</title><rect x="78.8889%" y="341" width="1.1111%" height="15" fill="rgb(207,120,37)" fg:x="71" fg:w="1"/><text x="79.1389%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="78.8889%" y="325" width="1.1111%" height="15" fill="rgb(227,98,0)" fg:x="71" fg:w="1"/><text x="79.1389%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="78.8889%" y="309" width="1.1111%" height="15" fill="rgb(207,7,3)" fg:x="71" fg:w="1"/><text x="79.1389%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="80.0000%" y="325" width="1.1111%" height="15" fill="rgb(206,98,19)" fg:x="72" fg:w="1"/><text x="80.2500%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="80.0000%" y="309" width="1.1111%" height="15" fill="rgb(217,5,26)" fg:x="72" fg:w="1"/><text x="80.2500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 5.56%)</title><rect x="76.6667%" y="373" width="5.5556%" height="15" fill="rgb(235,190,38)" fg:x="69" fg:w="5"/><text x="76.9167%" y="383.50">&lt;alloc:..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 2.22%)</title><rect x="80.0000%" y="357" width="2.2222%" height="15" fill="rgb(247,86,24)" fg:x="72" fg:w="2"/><text x="80.2500%" y="367.50">c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (2 samples, 2.22%)</title><rect x="80.0000%" y="341" width="2.2222%" height="15" fill="rgb(205,101,16)" fg:x="72" fg:w="2"/><text x="80.2500%" y="351.50">c..</text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 1.11%)</title><rect x="81.1111%" y="325" width="1.1111%" height="15" fill="rgb(246,168,33)" fg:x="73" fg:w="1"/><text x="81.3611%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 1.11%)</title><rect x="81.1111%" y="309" width="1.1111%" height="15" fill="rgb(231,114,1)" fg:x="73" fg:w="1"/><text x="81.3611%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="81.1111%" y="293" width="1.1111%" height="15" fill="rgb(207,184,53)" fg:x="73" fg:w="1"/><text x="81.3611%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="81.1111%" y="277" width="1.1111%" height="15" fill="rgb(224,95,51)" fg:x="73" fg:w="1"/><text x="81.3611%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="82.2222%" y="373" width="1.1111%" height="15" fill="rgb(212,188,45)" fg:x="74" fg:w="1"/><text x="82.4722%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="82.2222%" y="357" width="1.1111%" height="15" fill="rgb(223,154,38)" fg:x="74" fg:w="1"/><text x="82.4722%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 1.11%)</title><rect x="83.3333%" y="341" width="1.1111%" height="15" fill="rgb(251,22,52)" fg:x="75" fg:w="1"/><text x="83.5833%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="83.3333%" y="325" width="1.1111%" height="15" fill="rgb(229,209,22)" fg:x="75" fg:w="1"/><text x="83.5833%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="83.3333%" y="309" width="1.1111%" height="15" fill="rgb(234,138,34)" fg:x="75" fg:w="1"/><text x="83.5833%" y="319.50"></text></g><g><title>dump_tjs::process_textops_in_object (75 samples, 83.33%)</title><rect x="2.2222%" y="453" width="83.3333%" height="15" fill="rgb(212,95,11)" fg:x="2" fg:w="75"/><text x="2.4722%" y="463.50">dump_tjs::process_textops_in_object</text></g><g><title>dump_tjs::process_textops_in_object (75 samples, 83.33%)</title><rect x="2.2222%" y="437" width="83.3333%" height="15" fill="rgb(240,179,47)" fg:x="2" fg:w="75"/><text x="2.4722%" y="447.50">dump_tjs::process_textops_in_object</text></g><g><title>lopdf::content::Content&lt;Operations&gt;::encode (71 samples, 78.89%)</title><rect x="6.6667%" y="421" width="78.8889%" height="15" fill="rgb(240,163,11)" fg:x="6" fg:w="71"/><text x="6.9167%" y="431.50">lopdf::content::Content&lt;Operations&gt;::encode</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8&gt;&gt;::write_all (8 samples, 8.89%)</title><rect x="76.6667%" y="405" width="8.8889%" height="15" fill="rgb(236,37,12)" fg:x="69" fg:w="8"/><text x="76.9167%" y="415.50">std::io::impl..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 8.89%)</title><rect x="76.6667%" y="389" width="8.8889%" height="15" fill="rgb(232,164,16)" fg:x="69" fg:w="8"/><text x="76.9167%" y="399.50">alloc::vec::V..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 2.22%)</title><rect x="83.3333%" y="373" width="2.2222%" height="15" fill="rgb(244,205,15)" fg:x="75" fg:w="2"/><text x="83.5833%" y="383.50">c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 2.22%)</title><rect x="83.3333%" y="357" width="2.2222%" height="15" fill="rgb(223,117,47)" fg:x="75" fg:w="2"/><text x="83.5833%" y="367.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::len (1 samples, 1.11%)</title><rect x="84.4444%" y="341" width="1.1111%" height="15" fill="rgb(244,107,35)" fg:x="76" fg:w="1"/><text x="84.6944%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="84.4444%" y="325" width="1.1111%" height="15" fill="rgb(205,140,8)" fg:x="76" fg:w="1"/><text x="84.6944%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="84.4444%" y="309" width="1.1111%" height="15" fill="rgb(228,84,46)" fg:x="76" fg:w="1"/><text x="84.6944%" y="319.50"></text></g><g><title>_main (76 samples, 84.44%)</title><rect x="2.2222%" y="645" width="84.4444%" height="15" fill="rgb(254,188,9)" fg:x="2" fg:w="76"/><text x="2.4722%" y="655.50">_main</text></g><g><title>std::rt::lang_start (76 samples, 84.44%)</title><rect x="2.2222%" y="629" width="84.4444%" height="15" fill="rgb(206,112,54)" fg:x="2" fg:w="76"/><text x="2.4722%" y="639.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (76 samples, 84.44%)</title><rect x="2.2222%" y="613" width="84.4444%" height="15" fill="rgb(216,84,49)" fg:x="2" fg:w="76"/><text x="2.4722%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (76 samples, 84.44%)</title><rect x="2.2222%" y="597" width="84.4444%" height="15" fill="rgb(214,194,35)" fg:x="2" fg:w="76"/><text x="2.4722%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (76 samples, 84.44%)</title><rect x="2.2222%" y="581" width="84.4444%" height="15" fill="rgb(249,28,3)" fg:x="2" fg:w="76"/><text x="2.4722%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (76 samples, 84.44%)</title><rect x="2.2222%" y="565" width="84.4444%" height="15" fill="rgb(222,56,52)" fg:x="2" fg:w="76"/><text x="2.4722%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (76 samples, 84.44%)</title><rect x="2.2222%" y="549" width="84.4444%" height="15" fill="rgb(245,217,50)" fg:x="2" fg:w="76"/><text x="2.4722%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (76 samples, 84.44%)</title><rect x="2.2222%" y="533" width="84.4444%" height="15" fill="rgb(213,201,24)" fg:x="2" fg:w="76"/><text x="2.4722%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (76 samples, 84.44%)</title><rect x="2.2222%" y="517" width="84.4444%" height="15" fill="rgb(248,116,28)" fg:x="2" fg:w="76"/><text x="2.4722%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (76 samples, 84.44%)</title><rect x="2.2222%" y="501" width="84.4444%" height="15" fill="rgb(219,72,43)" fg:x="2" fg:w="76"/><text x="2.4722%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>dump_tjs::main (76 samples, 84.44%)</title><rect x="2.2222%" y="485" width="84.4444%" height="15" fill="rgb(209,138,14)" fg:x="2" fg:w="76"/><text x="2.4722%" y="495.50">dump_tjs::main</text></g><g><title>dump_tjs::process_textops_in_doc (76 samples, 84.44%)</title><rect x="2.2222%" y="469" width="84.4444%" height="15" fill="rgb(222,18,33)" fg:x="2" fg:w="76"/><text x="2.4722%" y="479.50">dump_tjs::process_textops_in_doc</text></g><g><title>lopdf::writer::&lt;impl lopdf::document::Document&gt;::save (1 samples, 1.11%)</title><rect x="85.5556%" y="453" width="1.1111%" height="15" fill="rgb(213,199,7)" fg:x="77" fg:w="1"/><text x="85.8056%" y="463.50"></text></g><g><title>lopdf::writer::&lt;impl lopdf::document::Document&gt;::save_internal (1 samples, 1.11%)</title><rect x="85.5556%" y="437" width="1.1111%" height="15" fill="rgb(250,110,10)" fg:x="77" fg:w="1"/><text x="85.8056%" y="447.50"></text></g><g><title>lopdf::writer::Writer::write_indirect_object (1 samples, 1.11%)</title><rect x="85.5556%" y="421" width="1.1111%" height="15" fill="rgb(248,123,6)" fg:x="77" fg:w="1"/><text x="85.8056%" y="431.50"></text></g><g><title>lopdf::writer::Writer::write_object (1 samples, 1.11%)</title><rect x="85.5556%" y="405" width="1.1111%" height="15" fill="rgb(206,91,31)" fg:x="77" fg:w="1"/><text x="85.8056%" y="415.50"></text></g><g><title>lopdf::writer::Writer::write_dictionary (1 samples, 1.11%)</title><rect x="85.5556%" y="389" width="1.1111%" height="15" fill="rgb(211,154,13)" fg:x="77" fg:w="1"/><text x="85.8056%" y="399.50"></text></g><g><title>lopdf::writer::Writer::write_object (1 samples, 1.11%)</title><rect x="85.5556%" y="373" width="1.1111%" height="15" fill="rgb(225,148,7)" fg:x="77" fg:w="1"/><text x="85.8056%" y="383.50"></text></g><g><title>lopdf::writer::Writer::write_array (1 samples, 1.11%)</title><rect x="85.5556%" y="357" width="1.1111%" height="15" fill="rgb(220,160,43)" fg:x="77" fg:w="1"/><text x="85.8056%" y="367.50"></text></g><g><title>lopdf::writer::Writer::need_separator (1 samples, 1.11%)</title><rect x="85.5556%" y="341" width="1.1111%" height="15" fill="rgb(213,52,39)" fg:x="77" fg:w="1"/><text x="85.8056%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.11%)</title><rect x="85.5556%" y="325" width="1.1111%" height="15" fill="rgb(243,137,7)" fg:x="77" fg:w="1"/><text x="85.8056%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.11%)</title><rect x="85.5556%" y="309" width="1.1111%" height="15" fill="rgb(230,79,13)" fg:x="77" fg:w="1"/><text x="85.8056%" y="319.50"></text></g><g><title>all (90 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(247,105,23)" fg:x="0" fg:w="90"/><text x="0.2500%" y="687.50"></text></g><g><title>4644134336 (90 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(223,179,41)" fg:x="0" fg:w="90"/><text x="0.2500%" y="671.50">4644134336</text></g><g><title>backtrace::backtrace::trace_unsynchronized (12 samples, 13.33%)</title><rect x="86.6667%" y="645" width="13.3333%" height="15" fill="rgb(218,9,34)" fg:x="78" fg:w="12"/><text x="86.9167%" y="655.50">backtrace::backtrace..</text></g><g><title>backtrace::backtrace::libunwind::trace (12 samples, 13.33%)</title><rect x="86.6667%" y="629" width="13.3333%" height="15" fill="rgb(222,106,8)" fg:x="78" fg:w="12"/><text x="86.9167%" y="639.50">backtrace::backtrace..</text></g></svg></svg>